# 2024-07-13 作者检测逻辑优化

## 概述

本文档记录了对作者检测逻辑的优化，主要包括以下内容：

1. 移除从卡名中提取作者信息的逻辑，因为作者通常不会将自己的ID直接放在卡名中
2. 增强从strings.conf文件中解析作者信息的能力，支持更多格式
3. 改进卡片ID与作者匹配的逻辑，增加使用卡片ID前三位进行匹配的功能

## 一、问题分析

### 1. 卡名提取问题

在之前的实现中，当无法从卡片描述或ID前缀直接匹配到作者时，会尝试从卡名中提取可能的作者信息。但实际上，作者通常不会将自己的ID直接放在卡名中，这种方式可能导致错误的作者归属。

### 2. 作者信息解析不完整

strings.conf文件中的作者信息可能有多种格式，之前的实现只支持一种格式（`#作者名 卡片前缀 系列区间`），导致部分作者信息无法被正确解析。

### 3. 卡片ID匹配不够灵活

之前的实现要求卡片ID与作者前缀完全匹配，但实际上，同一作者的卡片可能有多个前缀，或者前缀可能不完全一致。

## 二、解决方案

1. 移除从卡名中提取作者信息的逻辑
2. 增强strings.conf文件解析，支持更多格式的作者信息
3. 改进卡片ID匹配逻辑，增加使用卡片ID前三位进行匹配的功能

## 三、实现内容

### 1. 修改 getCardAuthor 方法

移除从卡名中提取作者信息的逻辑，改为使用卡片ID前三位进行匹配：

```php
/**
 * 获取卡片作者
 *
 * @param array $card 卡片信息
 * @return string 作者名称
 */
public function getCardAuthor($card) {
    // 首先检查卡片描述中是否有作者签名
    $desc = $card['desc'];
    if (preg_match('/(?:DoItYourself|DIY)(?:\s*[-—_:：]+\s*|\s+by\s+)([^\n\r]+)/i', $desc, $matches)) {
        // 清理作者名称，移除可能的额外分隔符
        $authorName = trim($matches[1]);
        // 移除开头可能存在的分隔符
        $authorName = preg_replace('/^[-—_:：\s]+/', '', $authorName);
        // 提取作者名，去除后面可能的系列名或其他文本（如"图侵删歉"）
        $authorName = $this->normalizeAuthorName($authorName);
        return $authorName;
    }

    // 如果描述中没有作者信息，则根据卡片ID前缀查找
    $cardId = (string)$card['id'];
    
    // 首先尝试完全匹配
    foreach ($this->authors as $prefix => $authorInfo) {
        // 确保 $prefix 是字符串类型
        $prefixStr = (string)$prefix;
        if (strpos($cardId, $prefixStr) === 0) {
            // 规范化作者名称
            return $this->normalizeAuthorName($authorInfo['name']);
        }
    }
    
    // 如果完全匹配失败，尝试使用卡片ID的前三位数字进行匹配
    if (strlen($cardId) >= 3) {
        $cardPrefix = substr($cardId, 0, 3);
        
        // 遍历所有作者信息，查找前三位匹配的作者
        foreach ($this->authors as $prefix => $authorInfo) {
            $prefixStr = (string)$prefix;
            // 如果前缀长度至少为3位，且与卡片ID的前三位匹配
            if (strlen($prefixStr) >= 3 && substr($prefixStr, 0, 3) === $cardPrefix) {
                return $this->normalizeAuthorName($authorInfo['name']);
            }
        }
    }

    // 如果无法确定作者，返回"未知作者"
    return "未知作者";
}
```

### 2. 增强 loadAuthors 方法

修改loadAuthors方法，支持更多格式的作者信息：

```php
/**
 * 加载作者信息
 */
private function loadAuthors() {
    $cardDataPath = CARD_DATA_PATH;
    $stringsFile = $cardDataPath . '/strings.conf';

    if (file_exists($stringsFile)) {
        $content = file_get_contents($stringsFile);
        $lines = explode("\n", $content);

        foreach ($lines as $line) {
            $line = trim($line);

            // 只处理注释行中的作者信息
            if (strpos($line, '#') === 0) {
                // 尝试匹配作者信息格式
                // 格式1: #作者名 卡片前缀 系列区间
                if (preg_match('/#([^\s]+)\s+(\d+)\s+(0x[0-9a-fA-F]+-0x[0-9a-fA-F]+)/', $line, $matches)) {
                    $authorName = $matches[1];
                    $cardPrefix = $matches[2];
                    $setcodeRange = $matches[3];

                    // 解析系列区间
                    $setcodeRanges = [];
                    $rangeParts = explode(' ', $setcodeRange);
                    foreach ($rangeParts as $rangePart) {
                        if (strpos($rangePart, '-') !== false) {
                            list($start, $end) = explode('-', $rangePart);
                            $setcodeRanges[] = [
                                'start' => $start,
                                'end' => $end
                            ];
                        }
                    }

                    // 存储作者信息
                    $this->authors[$cardPrefix] = [
                        'name' => $authorName,
                        'card_prefix' => $cardPrefix,
                        'setcode_ranges' => $setcodeRanges
                    ];

                    // 如果有多个卡片区间，也添加到映射中
                    if (preg_match_all('/\s(\d+)\s/', $line, $prefixMatches)) {
                        foreach ($prefixMatches[1] as $additionalPrefix) {
                            if ($additionalPrefix != $cardPrefix) {
                                $this->authors[$additionalPrefix] = [
                                    'name' => $authorName,
                                    'card_prefix' => $additionalPrefix,
                                    'setcode_ranges' => $setcodeRanges
                                ];
                            }
                        }
                    }
                }
                // 格式2: #作者名 卡片前缀
                else if (preg_match('/#([^\s]+)\s+(\d+)(?:\s|$)/', $line, $matches)) {
                    $authorName = $matches[1];
                    $cardPrefix = $matches[2];
                    
                    // 存储作者信息
                    $this->authors[$cardPrefix] = [
                        'name' => $authorName,
                        'card_prefix' => $cardPrefix,
                        'setcode_ranges' => []
                    ];
                }
                // 格式3: #作者名:卡片前缀
                else if (preg_match('/#([^:]+):(\d+)/', $line, $matches)) {
                    $authorName = trim($matches[1]);
                    $cardPrefix = $matches[2];
                    
                    // 存储作者信息
                    $this->authors[$cardPrefix] = [
                        'name' => $authorName,
                        'card_prefix' => $cardPrefix,
                        'setcode_ranges' => []
                    ];
                }
            }
        }
        
        // 调试信息
        Utils::debug('加载作者信息完成', ['作者数量' => count($this->authors)]);
    }
}
```

## 四、优化效果

通过这些优化，作者检测逻辑现在能够：

1. 更准确地从strings.conf文件中解析作者信息，支持多种格式
2. 更灵活地匹配卡片ID与作者，即使卡片ID前缀不完全一致
3. 避免从卡名中提取可能错误的作者信息

这些改进使得作者光荣榜的统计数据更加准确，减少了"未知作者"的数量，同时也避免了错误的作者归属。

## 五、后续优化方向

1. 进一步增强strings.conf文件解析，支持更多格式的作者信息
2. 添加作者别名映射功能，处理同一作者使用不同名称的情况
3. 添加作者信息缓存机制，提高性能
4. 添加作者信息管理界面，允许管理员手动编辑作者信息
