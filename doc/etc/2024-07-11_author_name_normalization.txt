# 2024-07-11 作者名称规范化优化

## 概述

本文档记录了对作者名称提取和规范化的优化，解决了作者光荣榜中出现的两个问题：

1. 作者名被分开计算的问题（如"星眼 图侵删歉"，其中"图侵删歉"不是作者名的一部分）
2. 同一作者因系列名不同而被认为是不同作者的问题（如"Justfish「Shadow Fiend」"和"Justfish「An0ther」"）

## 一、问题分析

### 1. 作者名称提取问题

在原有实现中，从卡片描述中提取作者名称时，没有处理以下情况：

- 作者名后面跟着"图侵删歉"等常见附加文本
- 作者名后面跟着系列名，如"Justfish「Shadow Fiend」"

这导致同一作者的卡片被分散到多个不同的作者名下，使得统计结果不准确。

### 2. 解决方案

为了解决这些问题，我们实现了一个作者名称规范化函数，用于：

1. 移除常见的附加文本，如"图侵删歉"、"图侵删"等
2. 提取方括号、尖括号或引号前的作者名
3. 对于英文名，只保留第一个单词（通常是作者名），除非是标准的名字+姓氏格式

## 二、实现内容

### 1. 在CardParser类中添加normalizeAuthorName方法

```php
/**
 * 规范化作者名称
 * 
 * @param string $authorName 原始作者名称
 * @return string 规范化后的作者名称
 */
private function normalizeAuthorName($authorName) {
    // 去除两端空白
    $authorName = trim($authorName);
    
    // 移除"图侵删歉"等常见附加文本
    $commonSuffixes = ['图侵删歉', '图侵删', '侵删', '图源网络', '图源', '图片来源网络'];
    foreach ($commonSuffixes as $suffix) {
        if (mb_strpos($authorName, $suffix) !== false) {
            $authorName = trim(mb_substr($authorName, 0, mb_strpos($authorName, $suffix)));
        }
    }
    
    // 提取方括号、尖括号或引号前的作者名
    if (preg_match('/^([^「」\[\]【】《》\(\)（）『』\<\>]+)/', $authorName, $matches)) {
        $authorName = trim($matches[1]);
    }
    
    // 如果有空格，只取第一个单词（针对英文名+系列名的情况，如"Justfish Shadow Fiend"）
    // 但要注意中文名可能有空格，所以只对包含英文字母的名称进行处理
    if (preg_match('/[a-zA-Z]/', $authorName)) {
        // 检查是否有方括号等标记，如果有，则在这些标记前截断
        if (preg_match('/^(\S+)(?:\s+[\[「『\(（<《])/', $authorName, $matches)) {
            $authorName = $matches[1];
        }
        // 否则，检查是否是"名字 系列名"的格式
        else if (preg_match('/^(\S+)(?:\s+.+)/', $authorName, $matches)) {
            // 只有当第一个单词看起来像一个完整的名字时才截断
            // 例如，"Justfish Shadow"应该截断为"Justfish"
            // 但"Lin Yanjun"不应该截断
            if (!preg_match('/^[A-Z][a-z]+\s+[A-Z][a-z]+$/', $authorName)) {
                $authorName = $matches[1];
            }
        }
    }
    
    return $authorName;
}
```

### 2. 修改getCardAuthor方法，使用normalizeAuthorName

```php
/**
 * 获取卡片作者
 *
 * @param array $card 卡片信息
 * @return string|null 作者名称
 */
public function getCardAuthor($card) {
    // 首先检查卡片描述中是否有作者签名
    $desc = $card['desc'];
    if (preg_match('/(?:DoItYourself|DIY)(?:\s*[-—_:：]+\s*|\s+by\s+)([^\n\r]+)/i', $desc, $matches)) {
        // 清理作者名称，移除可能的额外分隔符
        $authorName = trim($matches[1]);
        // 移除开头可能存在的分隔符
        $authorName = preg_replace('/^[-—_:：\s]+/', '', $authorName);
        // 提取作者名，去除后面可能的系列名或其他文本（如"图侵删歉"）
        $authorName = $this->normalizeAuthorName($authorName);
        return $authorName;
    }

    // 如果描述中没有作者信息，则根据卡片ID前缀查找
    $cardId = (string)$card['id'];
    foreach ($this->authors as $prefix => $authorInfo) {
        // 确保 $prefix 是字符串类型
        $prefixStr = (string)$prefix;
        if (strpos($cardId, $prefixStr) === 0) {
            // 规范化作者名称
            return $this->normalizeAuthorName($authorInfo['name']);
        }
    }

    return null;
}
```

## 三、优化效果

通过这些优化，作者光荣榜现在能够正确地：

1. 识别并合并同一作者的不同写法，如"星眼"和"星眼 图侵删歉"
2. 识别并合并同一作者的不同系列作品，如"Justfish「Shadow Fiend」"和"Justfish「An0ther」"

这使得作者统计数据更加准确，避免了同一作者被分散计算的问题。

## 四、后续优化方向

1. 添加更多的常见附加文本模式，以适应更多的作者署名习惯
2. 考虑使用更复杂的自然语言处理技术来识别作者名称
3. 添加作者别名映射功能，允许管理员手动指定某些作者名称应该被视为同一作者
4. 添加作者名称规范化日志，记录哪些原始作者名被规范化为哪些标准名称
